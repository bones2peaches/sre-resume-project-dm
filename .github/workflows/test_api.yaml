name: Build Projects

on:
  pull_request:
    branches:
      - main
jobs:
  unit-test-api:
    runs-on: ubuntu-latest
    outputs:
      has-passed: ${{steps.test.outputs.has-passed}}
    environment: test
    env:
      PYTHONPATH: "${{ github.workspace }}/api"
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: |
            api

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: install python dependencies
        working-directory: ./api
        run: |
          pip install -r requirements.txt

      - name: run api unit tests
        id: test
        working-directory: ./api
        run: |
          export STAGE=UNIT
          pytest tests/unit
          echo "has-passed=true" >> "$GITHUB_OUTPUT"

  integration-test-api:
    runs-on: self-hosted
    environment: test
    outputs:
      has-passed: ${{steps.test.outputs.has-passed}}
    env:
      PYTHONPATH: "${{ github.workspace }}/api"
      PYTHONDONTWRITEBYTECODE: 1
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_DEFAULT_OUTPUT: json

      DB_USER: "${{secrets.DB_USER }}"
      DB_PORT: "${{secrets.DB_PORT }}"
      DB_HOST: "${{secrets.DB_HOST }}"
      SECRET_ID: "${{secrets.DB_SECRET_ARN }}"
      DB_NAME: postgres
      STAGE: TEST

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          sparse-checkout: |
            api
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"
      - name: install python dependencies
        working-directory: ./api
        run: |
          pip install -r requirements.txt
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip

      - id: install-aws-cli
        uses: unfor19/install-aws-cli-action@v1
        with:
          version: 2 # default
          verbose: false # default
          arch: amd64 # allowed values: amd64, arm64

      - name: Prepare Alembic Environment
        working-directory: ./api

        run: |
          rm -rf alembic/versions
          aws s3 sync s3://${{ secrets.BUCKET_NAME }}/resume/test/alembic alembic/versions
          SECRET=$(aws secretsmanager get-secret-value --secret-id $SECRET_ID --query SecretString --output text)
          echo "DB_PASSWORD=$SECRET" >> $GITHUB_ENV

      - name: Generate Alembic Revision
        working-directory: ./api
        run: |
          alembic revision --autogenerate -m "GITHUBSHA ${{ github.sha }} TEST DB RUN"
          alembic upgrade head

      - name: Sync Changes to S3
        working-directory: ./api
        run: |
          aws s3 sync alembic/versions s3://${{ secrets.BUCKET_NAME }}/resume/test/alembic

      - name: run api integration test
        id: test
        working-directory: ./api
        run: |
          pytest tests/integration
          echo "has-passed=true" >> "$GITHUB_OUTPUT"

  push-ecr:
    runs-on: ubuntu-latest
    needs: [integration-test-api, unit-test-api]
    outputs:
      api-has-built: ${{ steps.api.outputs.has-built }}
      nchan-has-built: ${{ steps.nchan.outputs.has-built }}
    environment: test

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1
      AWS_DEFAULT_OUTPUT: json
      ECR_NAME: ${{ secrets.ECR_NAME }}

    steps:
      - uses: actions/checkout@v4
        if: ${{ needs.unit-test-api.outputs.has-passed == 'true' }} && ${{ needs.integration-test-api.outputs.has-passed == 'true' }}
        with:
          fetch-depth: 0
          sparse-checkout: |
            api

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push API docker image to Amazon ECR
        working-directory: ./api
        id: api
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_NAME }}
          IMAGE_TAG: "api-${{ github.sha }}"
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "has-built=true" >> "$GITHUB_OUTPUT"

      - name: Build, tag, and push NCHAN docker image to Amazon ECR
        working-directory: ./api/nchan
        id: nchan
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ secrets.ECR_NAME }}
          IMAGE_TAG: "nchan-${{ github.sha }}"
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "has-built=true" >> "$GITHUB_OUTPUT"

  update-ecs:
    runs-on: ubuntu-latest
    needs: [push-ecr]
    environment: test

    steps:
      - uses: actions/checkout@v4
        if: needs.push-ecr.outputs.api-has-built == 'true' || needs.push-ecr.outputs.nchan-has-built == 'true'
        with:
          fetch-depth: 0
          sparse-checkout: |
            terraform/environments/test
            terraform/modules

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Update API
        id: api
        env:
          BUCKET_NAME: ${{secrets.BUCKET_NAME}}
          TF_VAR_github_sha: ${{github.sha}}
          TF_VAR_nchan_username: ${{secrets.NCHAN_USERNAME}}
          TF_VAR_nchan_password: ${{secrets.NCHAN_PASSWORD}}
        uses: gruntwork-io/terragrunt-action@v2
        if: ${{needs.push-ecr.outputs.api-has-built == 'true'}}

        with:
          tf_version: 1.7.5
          tg_version: 0.55.14
          tg_dir: terraform/environments/test/ecs/deployment/task/api
          tg_command: "apply"


